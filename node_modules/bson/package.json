{
  "_args": [
    [
      {
        "raw": "bson@~0.5.1",
        "scope": null,
        "escapedName": "bson",
        "name": "bson",
        "rawSpec": "~0.5.1",
        "spec": ">=0.5.1 <0.6.0",
        "type": "range"
      },
      "C:\\Users\\Vignesh\\Desktop\\node-todo-api\\node_modules\\mongodb-core"
    ]
  ],
  "_from": "bson@>=0.5.1 <0.6.0",
  "_id": "bson@0.5.7",
  "_inCache": true,
  "_location": "/bson",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/bson-0.5.7.tgz_1479477418380_0.5046395626850426"
  },
  "_npmUser": {
    "name": "christkv",
    "email": "christkv@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bson@~0.5.1",
    "scope": null,
    "escapedName": "bson",
    "name": "bson",
    "rawSpec": "~0.5.1",
    "spec": ">=0.5.1 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mongodb-core"
  ],
  "_resolved": "https://registry.npmjs.org/bson/-/bson-0.5.7.tgz",
  "_shasum": "0d11fe0936c1fee029e11f7063f5d0ab2422ea3e",
  "_shrinkwrap": null,
  "_spec": "bson@~0.5.1",
  "_where": "C:\\Users\\Vignesh\\Desktop\\node-todo-api\\node_modules\\mongodb-core",
  "author": {
    "name": "Christian Amor Kvalheim",
    "email": "christkv@gmail.com"
  },
  "browser": "lib/bson/bson.js",
  "bugs": {
    "url": "https://github.com/mongodb/js-bson/issues"
  },
  "config": {
    "native": false
  },
  "contributors": [],
  "dependencies": {},
  "description": "A bson parser for node.js and the browser",
  "devDependencies": {
    "benchmark": "1.0.0",
    "colors": "1.1.0",
    "gleak": "0.2.3",
    "nodeunit": "0.9.0"
  },
  "directories": {
    "lib": "./lib/bson"
  },
  "dist": {
    "shasum": "0d11fe0936c1fee029e11f7063f5d0ab2422ea3e",
    "tarball": "https://registry.npmjs.org/bson/-/bson-0.5.7.tgz"
  },
  "engines": {
    "node": ">=0.6.19"
  },
  "files": [
    "lib",
    "browser_build",
    "alternate_parsers",
    "bower.json",
    "tools",
    "deserializer_bak.js"
  ],
  "gitHead": "c3bc67c4e89e795beca2d6d309e7a840b740574d",
  "homepage": "https://github.com/mongodb/js-bson#readme",
  "keywords": [
    "mongodb",
    "bson",
    "parser"
  ],
  "license": "Apache-2.0",
  "main": "./lib/bson/index",
  "maintainers": [
    {
      "name": "octave",
      "email": "chinsay@gmail.com"
    },
    {
      "name": "christkv",
      "email": "christkv@gmail.com"
    }
  ],
  "name": "bson",
  "optionalDependencies": {},
  "readme": "# BSON parser\n\nIf you don't yet know what BSON actually is, read [the spec](http://bsonspec.org).\n\nThis package can be used to serialize JSON documents into the BSON format or the other way around. If you want to use it within the browser, give [browserify](https://github.com/substack/node-browserify) a try (it will help you add this package to your bundle). The current build is located in the `browser_build/bson.js` file.\n\nA simple example of how to use BSON in the browser:\n\n```html\n<script src=\"./browser_build/bson.js\"></script>\n\n<script>\n  function start() {\n    var BSON = bson().BSON\n    var Long = bson().Long\n\n    var doc = { long: Long.fromNumber(100) }\n\n    // Serialize a document\n    var data = BSON.serialize(doc, false, true, false)\n    // De serialize it again\n    var doc_2 = BSON.deserialize(data)\n  }\n</script>\n```\n\nA simple example of how to use BSON in `node.js`:\n\n```js\nvar bson = require('bson')\nvar BSON = new bson.BSONPure.BSON()\nvar Long = bson.BSONPure.Long\n\nvar doc = { long: Long.fromNumber(100) }\n\n// Serialize a document\nvar data = BSON.serialize(doc, false, true, false)\nconsole.log('data:', data)\n\n// Deserialize the resulting Buffer\nvar doc_2 = BSON.deserialize(data)\nconsole.log('doc_2:', doc_2)\n```\n\n## API\n\nThe API consists of two simple methods to serialize/deserialize objects to/from BSON format:\n=======\n## Installation\n\n`npm install bson`\n\n## API\n\n### BSON serialization and deserialiation\n\n**`new bson.BSONPure.BSON()`** - Creates a new BSON seralizer/deserializer you can use to serialize and deserialize BSON.\n\n  * BSON.serialize(object, checkKeys, asBuffer, serializeFunctions)\n     * @param {Object} object the Javascript object to serialize.\n     * @param {Boolean} checkKeys the serializer will check if keys are valid.\n     * @param {Boolean} asBuffer return the serialized object as a Buffer object **(ignore)**.\n     * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**\n     * @return {TypedArray/Array} returns a TypedArray or Array depending on what your browser supports\n\n  * BSON.deserialize(buffer, options, isArray)\n     * Options\n       * **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n       * **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n       * **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n       * **promoteBuffers** {Boolean, default:false}, deserialize Binary data directly into node.js Buffer object.\n     * @param {TypedArray/Array} a TypedArray/Array containing the BSON data\n     * @param {Object} [options] additional options used for the deserialization.\n     * @param {Boolean} [isArray] ignore used for recursive parsing.\n     * @return {Object} returns the deserialized Javascript Object.\n\n### ObjectId\n\n**`bson.ObjectId.isValid(id)`** - Returns true if `id` is a valid number or hexadecimal string representing an ObjectId.\n**`bson.ObjectId.createFromHexString(hexString)`** - Returns the ObjectId the `hexString` represents.\n**`bson.ObjectId.createFromTime(time)`** - Returns an ObjectId containing the passed time.\n* `time` - A Unix timestamp (number of seconds since the epoch).\n\n**`var objectId = new bson.ObjectId(id)`** - Creates a new `ObjectId`.\n* `id` - Must either be a 24-character hex string or a 12 byte binary string.\n\n**`objectId.toJSON()`**\n**`objectId.toString()`**\n**`objectId.toHexString()`** - Returns a hexadecimal string representation of the ObjectId.\n\n**`objectId.equals(otherObjectId)`** - Returns true if the ObjectIds are the same, false otherwise.\n\n**`objectId.getTimestamp()`** - Returns a `Date` object containing the time the objectId was created for.\n\n**`objectId.getTimestamp()`** - Returns a `Date` object containing the time the objectId contains.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mongodb/js-bson.git"
  },
  "scripts": {
    "test": "nodeunit ./test/node"
  },
  "version": "0.5.7"
}
